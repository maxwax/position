#!/bin/bash

#
# position
#
# Position windows on a Linux system using 'wmctrl' so that common apps that
# should be in consistent places (password manager, email, Slack, etc) are
# automatically moved there with one launch of this script.
#
# Ideal use: when switching from desktop to laptop, laptop to desktop mode,
# windows may be randomly re-positioned.  This brings order to the display.
#
# 2019-10-29 maxcode@maxwellspangler.com

VERSION="1.3.0"
VERSION_DATE="2023-01-10"

function available_display_configs {
  #
  if [[ -r $CONFIG_FILE ]]
  then
    echo "Available monitor configurations:"
    echo
    grep '^monitor-config:' $CONFIG_FILE
  fi
}

function usage {

	echo
	echo "position [special-rule-id] $VERSION  $VERSION_DATE"
	echo
  echo "With no parameters, it will use your monitor resolution to"
  echo "find window positioning rules in $HOME/.position.conf and apply them."
  echo
  echo "With a special-rule-id parameter, it will look for those rules"
  echo "in the config file and apply them."
  echo
  available_display_configs
}

function get_resolution {

  RESOLUTION=$(xdpyinfo | grep dimensions | awk '{print $2}')

  # Remove vertical resolution 'x1200'
  HORIZONTAL_RESOLUTION=${RESOLUTION%x*}

  if [[ ! -z $DEBUG ]]
  then
    echo "Resolution: $RESOLUTION, Horizontal Resolution $HORIZONTAL_RESOLUTION"
  fi
}

function scan_for_monitor_config {
  # $1 is an exact horizontal x vertical resolution or horizontal x 9999 string

  DISPLAY_LINE_COUNT=$(grep '^monitor-config:' $CONFIG_FILE | egrep -v "^#" | grep ${1}| wc -l)

  if [[ $DISPLAY_LINE_COUNT -gt 0 ]]
  then
    DISPLAY_LINE=$(grep '^monitor-config:' $CONFIG_FILE | egrep -v "^#" | grep ${1})
    if [[ ! -z $DEBUG ]]
    then
      echo "Monitor config is |$DISPLAY_LINE|"
    fi

    POSITION_RULE=$(echo $DISPLAY_LINE | awk '{print $2}')
    if [[ ! -z $DEBUG ]]
    then
      echo "Position rule is |$POSITION_RULE|"
    fi
  fi
}

# Using display resolution, try to find a monitor-config line for the resolution
function find_monitor_config {
  POSITION_RULE=""
  # Try getting exact horizontal x vertical resolution config
  if [[ ! -z $DEBUG ]]
  then
    echo "Looking for monitor-config match horizontal x vertical resolution."
  fi

  scan_for_monitor_config $RESOLUTION
  if [[ $POSITION_RULE == "" ]]
  then
    if [[ ! -z $DEBUG ]]
    then
      echo "Looking for monitor-config horizontal match only."
    fi
    # Now try getting horizontal x 9999 resolution config
    scan_for_monitor_config "${HORIZONTAL_RESOLUTION}x9999"
  else
    echo "Error: Can't find a monitor-config line in $CONFIG_FILE for resolution $RESOLUTION"
    available_display_configs
    exit 1
  fi
}

function check_for_window_rules {

  POSITION_COUNT=$(grep $POSITION_RULE $CONFIG_FILE | grep -v 'monitor-config:' | egrep -v "^#" | wc -l)

  if [[ $POSITION_COUNT -gt 0 ]]
  then
    echo "Found position rules to apply"
  else
    echo "Error: No position rules to apply for |$POSITION_RULE|."
    exit 1
  fi
}

function position_windows {

  POSITION_LINES=$(grep $POSITION_RULE $CONFIG_FILE | grep -v 'monitor-config:' | egrep -v "^#")

  echo "$POSITION_LINES" | while read LINE
  do
    POS_COMMAND=$(echo $LINE | awk -F '"' '{print $2}')

    echo "Eval wmctrl -r $POS_COMMAND"
    eval wmctrl -r $POS_COMMAND
  done
}

#
# Main code
#

# Required
CONFIG_FILE=~/.position.conf

# Global variable
RESOLUTION=""
DISPLAY_LINE=""

# Only used to catch if user wants help, offer this before any real work
PARAM=${1:-"_null"}

if [[ $PARAM == "help" || $PARAM == "usage" || $PARAM == "-h" || $PARAM == "--help" || $PARAM == "-help" ]]
then
	usage
	exit 0
else
  if [[ $PARAM != "_null" ]]
  then
    echo "Using special config |$PARAM|"
  else
    echo "Using default resolution based window placement."
    PARAM=""
  fi
fi

# We require a config file, so check for that and bail out if not available
if [[ ! -r $CONFIG_FILE ]]
then
  if [[ ! -f $CONFIG_FILE ]]
  then
    echo "Error: Config file $CONFIG_FILE does not exist."
  else
    echo "Error: Config file $CONFIG_FILE is not readable."
  fi
  exit 1
fi

# Check for our one dependency 'wmctrl'
WMLOC=$(whereis wmctrl | awk '{print $2}')
if [[ $WMLOC == "" ]]
then
  echo -n "whereis "
  whereis wmctrl
  echo "Error: I can't find 'wmctrl' used to reposition windows."
  echo "Please install this before using this program."
  exit 1
fi

if [[ ! -z $PARAM ]]
then
  # User provided a parameter, so we'll apply any rules with the parameter name
  POSITION_RULE="$PARAM"
else
  # User did not provide a parameter,
  # Identify the monitor configuration via the whole desktop resolution
  get_resolution
fi

# Attempt to find a monitor-config rule in the config file for this resolution
find_monitor_config

# Do we have rules to position windows for this display configuration?
check_for_window_rules

# If we do, position the windows
position_windows
