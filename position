#!/bin/bash

#
# position
#
# Position windows on a Linux system using 'wmctrl' so that common apps that
# should be in consistent places (password manager, email, Slack, etc) are
# automatically moved there with one launch of this script.
#
# Ideal use: when switching from desktop to laptop, laptop to desktop mode,
# windows may be randomly re-positioned.  This brings order to the display.
#
# 2019-10-29 maxcode@maxwellspangler.com

VERSION="1.1.0"
VERSION_DATE="2020-01-10"

function available_display_configs {
  #
  if [[ -r $CONFIG_FILE ]]
  then
    echo "Available monitor configurations:"
    echo
    grep '^monitor-config:' $CONFIG_FILE
  fi
}

function usage {

	echo
	echo "position  $VERSION  $VERSION_DATE"
	echo
  echo "No parameters required. If the configuration of your displays"
  echo "is recognized and there are rules for that display config, it"
  echo "will reposition windows using those rules."
  echo
  available_display_configs
}

function get_resolution {

  RESOLUTION=$(xdpyinfo | grep dimensions | awk '{print $2}')
  echo "Resolution: $RESOLUTION"

  DISPLAY_LINE_COUNT=$(grep '^monitor-config:' $CONFIG_FILE | grep $RESOLUTION| wc -l)

  if [[ $DISPLAY_LINE_COUNT -gt 0 ]]
  then
    DISPLAY_LINE=$(grep '^monitor-config:' $CONFIG_FILE | grep $RESOLUTION)
    echo "Monitor config is |$DISPLAY_LINE|"

    POSITION_RULE=$(echo $DISPLAY_LINE | awk '{print $2}')
    echo "Position rule is |$POSITION_RULE|"

  else
    echo "Error: Can't find a monitor-config line in $CONFIG_FILE for resolution $RESOLUTION"
    available_display_configs
    exit 1
  fi
}

function check_for_window_rules {

  POSITION_COUNT=$(grep $POSITION_RULE $CONFIG_FILE | grep -v 'monitor-config:' | wc -l)

  if [[ $POSITION_COUNT -gt 0 ]]
  then
    echo "Found position rules to apply"
  else
    echo "Error: No position rules to apply for |$POSITION_RULE|."
    exit 1
  fi
}

function position_windows {

  POSITION_LINES=$(grep $POSITION_RULE $CONFIG_FILE | grep -v 'monitor-config:')

  echo "$POSITION_LINES" | while read LINE
  do
    POS_COMMAND=$(echo $LINE | awk -F '"' '{print $2}')

    echo "Eval wmctrl -r $POS_COMMAND"
    eval wmctrl -r $POS_COMMAND
  done
}

#
# Main code
#

# Required
CONFIG_FILE=~/.position.conf

# Global variable
RESOLUTION=""
DISPLAY_LINE=""

# Only used to catch if user wants help, offer this before any real work
PARAM=${1:-"null"}

if [[ $PARAM == "help" || $PARAM == "usage" || $PARAM == "-h" || $PARAM == "--help" || $PARAM == "-help" ]]
then
	usage
	exit 0
fi

# We require a config file, so check for that and bail out if not available
if [[ ! -r $CONFIG_FILE ]]
then
  if [[ ! -f $CONFIG_FILE ]]
  then
    echo "Error: Config file $CONFIG_FILE does not exist."
  else
    echo "Error: Config file $CONFIG_FILE is not readable."
  fi
  exit 1
fi

# Check for our one dependency 'wmctrl'
WMLOC=$(whereis wmctrl | awk '{print $2}')
if [[ $WMLOC == "" ]]
then
  echo -n "whereis "
  whereis wmctrl
  echo "Error: I can't find 'wmctrl' used to reposition windows."
  echo "Please install this before using this program."
  exit 1
fi

# Identify the monitor configuration via the whole desktop resolution
get_resolution

# Do we have rules to position windows for this display configuration?
check_for_window_rules

# If we do, position the windows
position_windows
